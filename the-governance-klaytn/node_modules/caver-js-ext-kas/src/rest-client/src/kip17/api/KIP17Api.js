/*
 * KIP-17 API
 *   # Error Codes  ## 400: Bad Request   | Code | Messages |   | --- | --- |   | 1100050 | incorrect request 1100101 | data don't exist 1100251 | its value is out of range; size 1104401 | failed to get an account |   ## 404: Not Found   | Code | Messages |   | --- | --- |   | 1104404 | Token not found |   ## 409: Conflict   | Code | Messages |   | --- | --- |   | 1104400 | Duplicate alias - test |
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

;(function(root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([
            '../../ApiClient',
            '../model/ApproveAllKip17Request',
            '../model/ApproveKip17TokenRequest',
            '../model/BurnKip17TokenRequest',
            '../model/DeployKip17ContractRequest',
            '../model/ErrorResponse',
            '../model/GetKip17TokenHistoryResponse',
            '../model/GetKip17TokenResponse',
            '../model/GetOwnerKip17TokensResponse',
            '../model/Kip17ContractInfoResponse',
            '../model/Kip17ContractListResponse',
            '../model/Kip17TokenListResponse',
            '../model/Kip17TransactionStatusResponse',
            '../model/MintKip17TokenRequest',
            '../model/TransferKip17TokenRequest',
        ], factory)
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(
            require('../../ApiClient'),
            require('../model/ApproveAllKip17Request'),
            require('../model/ApproveKip17TokenRequest'),
            require('../model/BurnKip17TokenRequest'),
            require('../model/DeployKip17ContractRequest'),
            require('../model/ErrorResponse'),
            require('../model/GetKip17TokenHistoryResponse'),
            require('../model/GetKip17TokenResponse'),
            require('../model/GetOwnerKip17TokensResponse'),
            require('../model/Kip17ContractInfoResponse'),
            require('../model/Kip17ContractListResponse'),
            require('../model/Kip17TokenListResponse'),
            require('../model/Kip17TransactionStatusResponse'),
            require('../model/MintKip17TokenRequest'),
            require('../model/TransferKip17TokenRequest')
        )
    } else {
        // Browser globals (root is window)
        if (!root.Kip17Api) {
            root.Kip17Api = {}
        }
        root.Kip17Api.KIP17Api = factory(
            root.Kip17Api.ApiClient,
            root.Kip17Api.ApproveAllKip17Request,
            root.Kip17Api.ApproveKip17TokenRequest,
            root.Kip17Api.BurnKip17TokenRequest,
            root.Kip17Api.DeployKip17ContractRequest,
            root.Kip17Api.ErrorResponse,
            root.Kip17Api.GetKip17TokenHistoryResponse,
            root.Kip17Api.GetKip17TokenResponse,
            root.Kip17Api.GetOwnerKip17TokensResponse,
            root.Kip17Api.Kip17ContractInfoResponse,
            root.Kip17Api.Kip17ContractListResponse,
            root.Kip17Api.Kip17TokenListResponse,
            root.Kip17Api.Kip17TransactionStatusResponse,
            root.Kip17Api.MintKip17TokenRequest,
            root.Kip17Api.TransferKip17TokenRequest
        )
    }
})(this, function(
    ApiClient,
    ApproveAllKip17Request,
    ApproveKip17TokenRequest,
    BurnKip17TokenRequest,
    DeployKip17ContractRequest,
    ErrorResponse,
    GetKip17TokenHistoryResponse,
    GetKip17TokenResponse,
    GetOwnerKip17TokensResponse,
    Kip17ContractInfoResponse,
    Kip17ContractListResponse,
    Kip17TokenListResponse,
    Kip17TransactionStatusResponse,
    MintKip17TokenRequest,
    TransferKip17TokenRequest
) {
    /**
     * KIP17 service.
     * @class KIP17Api
     * @version 1.0
     */

    /**
     * Constructs a new KIP17Api.
     * @alias KIP17Api
     * @class
     * @param {ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link ApiClient#instance} if unspecified.
     */
    const KIP17Api = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance

        /**
         * Callback function to receive the result of the approveAll operation.
         * @callback KIP17Api~approveAllCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ApproveAll
         * Approves an EOA, `to`, to perform token operations on all token of a contract which `from` owns.<p></p>
         * @param {String} xChainId Klaytn network chain ID, one of [1001, 8217]
         * @param {String} contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias
         * @param {Object} opts Optional parameters
         * @param {ApproveAllKip17Request} opts.body
         * @param {KIP17Api~approveAllCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TransactionStatusResponse}
         */
        this.approveAll = function(xChainId, contractAddressOrAlias, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling approveAll")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling approveAll")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/approveall',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the approveToken operation.
         * @callback KIP17Api~approveTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ApproveToken
         * Approves an EOA, `to`, to perform token operations on a particular token of a contract which `from` owns. If `from` is not the owner, then the transaction submitted from this API will be reverted.<p></p>
         * @param {String} xChainId Klaytn network chain ID; one of [1001, 8217]
         * @param {String} contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias
         * @param {String} tokenId Token ID to approve the 3rd party to transfer
         * @param {Object} opts Optional parameters
         * @param {ApproveKip17TokenRequest} opts.body
         * @param {KIP17Api~approveTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TransactionStatusResponse}
         */
        this.approveToken = function(xChainId, contractAddressOrAlias, tokenId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling approveToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling approveToken")
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId === undefined || tokenId === null) {
                throw new Error("Missing the required parameter 'tokenId' when calling approveToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                'token-id': tokenId,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/approve/{token-id}',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the burnToken operation.
         * @callback KIP17Api~burnTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * BurnToken
         * Burns a token. If `from` is not the owner or has been approved for this operation, then the transaction submitted from this API will be reverted.<p></p>
         * @param {String} xChainId Klaytn network chain ID; one of [1001, 8217]
         * @param {String} contractAddressOrAlias Contract address or unique alias
         * @param {String} tokenId Token ID to burn
         * @param {Object} opts Optional parameters
         * @param {BurnKip17TokenRequest} opts.body
         * @param {KIP17Api~burnTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TransactionStatusResponse}
         */
        this.burnToken = function(xChainId, contractAddressOrAlias, tokenId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling burnToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling burnToken")
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId === undefined || tokenId === null) {
                throw new Error("Missing the required parameter 'tokenId' when calling burnToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                'token-id': tokenId,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/token/{token-id}',
                'DELETE',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the deployContract operation.
         * @callback KIP17Api~deployContractCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * DeployContract
         * Deploys a new KIP-17 contract with user submitted parameters.<p></p>
         * @param {String} xChainId Klaytn network chain ID; one of [1001, 8217]
         * @param {Object} opts Optional parameters
         * @param {DeployKip17ContractRequest} opts.body
         * @param {KIP17Api~deployContractCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TransactionStatusResponse}
         */
        this.deployContract = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling deployContract")
            }

            const pathParams = {}
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getContract operation.
         * @callback KIP17Api~getContractCallback
         * @param {String} error Error message, if any.
         * @param {Kip17ContractInfoResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetContract
         * Retrieves KIP-17 contract information by either contract address or alias.<p></p>
         * @param {String} xChainId Klaytn network chain ID; one of [1001, 8217]
         * @param {String} contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias
         * @param {KIP17Api~getContractCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17ContractInfoResponse}
         */
        this.getContract = function(xChainId, contractAddressOrAlias, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getContract")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling getContract")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17ContractInfoResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getOwnerTokens operation.
         * @callback KIP17Api~getOwnerTokensCallback
         * @param {String} error Error message, if any.
         * @param {GetOwnerKip17TokensResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetOwnerTokens
         * Lists all tokens of the same owner (`owner-address`) of a contract.<p></p>
         * @param {String} xChainId Klaytn network chain ID
         * @param {String} contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias
         * @param {String} ownerAddress Token owner address
         * @param {Object} opts Optional parameters
         * @param {Number} opts.size Number of items to return
         * @param {String} opts.cursor Items offset
         * @param {KIP17Api~getOwnerTokensCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link GetOwnerKip17TokensResponse}
         */
        this.getOwnerTokens = function(xChainId, contractAddressOrAlias, ownerAddress, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getOwnerTokens")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling getOwnerTokens")
            }

            // verify the required parameter 'ownerAddress' is set
            if (ownerAddress === undefined || ownerAddress === null) {
                throw new Error("Missing the required parameter 'ownerAddress' when calling getOwnerTokens")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                'owner-address': ownerAddress,
            }
            const queryParams = {
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = GetOwnerKip17TokensResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/owner/{owner-address}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getToken operation.
         * @callback KIP17Api~getTokenCallback
         * @param {String} error Error message, if any.
         * @param {GetKip17TokenResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetToken
         * Retrieves the requested token information of a parcitular KIP-17 contract.<p></p>
         * @param {String} xChainId Klaytn network chain ID
         * @param {String} contractAddressOrAlias Contract address or unique alias
         * @param {String} tokenId Token ID to retreive
         * @param {KIP17Api~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link GetKip17TokenResponse}
         */
        this.getToken = function(xChainId, contractAddressOrAlias, tokenId, callback) {
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling getToken")
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId === undefined || tokenId === null) {
                throw new Error("Missing the required parameter 'tokenId' when calling getToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                'token-id': tokenId,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = GetKip17TokenResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/token/{token-id}',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the getTokenHistory operation.
         * @callback KIP17Api~getTokenHistoryCallback
         * @param {String} error Error message, if any.
         * @param {GetKip17TokenHistoryResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * GetTokenHistory
         * Lists token transfer histories starting from the time the requested token was minted, where each entry of the response items shows a transfer record.<p></p>
         * @param {String} xChainId Klaytn network chain ID
         * @param {String} contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias
         * @param {String} tokenId Token ID
         * @param {Object} opts Optional parameters
         * @param {Number} opts.size Number of items to return
         * @param {String} opts.cursor Items offset
         * @param {KIP17Api~getTokenHistoryCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link GetKip17TokenHistoryResponse}
         */
        this.getTokenHistory = function(xChainId, contractAddressOrAlias, tokenId, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling getTokenHistory")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling getTokenHistory")
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId === undefined || tokenId === null) {
                throw new Error("Missing the required parameter 'tokenId' when calling getTokenHistory")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                'token-id': tokenId,
            }
            const queryParams = {
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = GetKip17TokenHistoryResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/token/{token-id}/history',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the listContractsInDeployerPool operation.
         * @callback KIP17Api~listContractsInDeployerPoolCallback
         * @param {String} error Error message, if any.
         * @param {Kip17ContractListResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ListContractsInDeployerPool
         * Lists all contracts deployed in the requested deployer pool. If the pool is not specified, the default pool will be queried.<p></p>
         * @param {String} xChainId Klaytn network chain ID; one of [1001, 8217]
         * @param {Object} opts Optional parameters
         * @param {Number} opts.size Number of items to return
         * @param {String} opts.cursor Items offset
         * @param {KIP17Api~listContractsInDeployerPoolCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17ContractListResponse}
         */
        this.listContractsInDeployerPool = function(xChainId, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling listContractsInDeployerPool")
            }

            const pathParams = {}
            const queryParams = {
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17ContractListResponse

            return this.apiClient.callApi(
                '/v1/contract',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the listTokens operation.
         * @callback KIP17Api~listTokensCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TokenListResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * ListTokens
         * Lists all tokens minted from a particular KIP-17 contract. Use contract address or alias to query the contract.<p></p>
         * @param {String} xChainId Klaytn network chain ID
         * @param {String} contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias
         * @param {Object} opts Optional parameters
         * @param {Number} opts.size Number of items to return
         * @param {String} opts.cursor Items offset
         * @param {KIP17Api~listTokensCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TokenListResponse}
         */
        this.listTokens = function(xChainId, contractAddressOrAlias, opts, callback) {
            opts = opts || {}
            const postBody = null

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling listTokens")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling listTokens")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {
                size: opts.size,
                cursor: opts.cursor,
            }
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TokenListResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/token',
                'GET',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the mintToken operation.
         * @callback KIP17Api~mintTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * MintToken
         * Mints a new token on the requested KIP-17 contract. The target contract can be requested by either contract address or alias.<p></p>  Do not mint a token to an address outside of account pools you control. KIP-17 APIs only allow actions among accounts populated within the KAS account pools that you own.<p></p>
         * @param {String} xChainId Klaytn network chain ID; one of [1001, 8217]
         * @param {String} contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias
         * @param {Object} opts Optional parameters
         * @param {MintKip17TokenRequest} opts.body
         * @param {KIP17Api~mintTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TransactionStatusResponse}
         */
        this.mintToken = function(xChainId, contractAddressOrAlias, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling mintToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling mintToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/token',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }

        /**
         * Callback function to receive the result of the transferToken operation.
         * @callback KIP17Api~transferTokenCallback
         * @param {String} error Error message, if any.
         * @param {Kip17TransactionStatusResponse} data The data returned by the service call.
         * @param {String} response The complete HTTP response.
         */

        /**
         * TransferToken
         * Transfers a token. If `sender` and `owner` are not the same, then `sender` must have been approved for this token transfer.<p></p>  Note that this API requires two KRNs, one for the deployer pool and one for the sender. <p></p>  - The first KRN for the deployer pool, which must be formatted as `krn:*:kip17:*:account-pool:*` makes sure the API caller has the right to invoke transfer method on the requested contract. Although contracts in Klaytn are publicly available and anyone who knows the address can invoke the contract functions, if the contract owner does not reveal the address, it would be difficult to even find out the address as it requires indirect measures such as observing network communication. To this end, as we do not know whether the address has been publicly advertised or not, KIP-17 API assumes that only the contract owner invokes contract functions.  - The second KRN is for the `sender`, and must be formatted as `krn:*:wallet:*:account-pool:*`. Currently, KIP-17 API only allows transferring tokens among accounts populated in KAS Wallet account pools. - As all other APIs, leavning `x-krn` empty automatically fills the field with default values.<p></p>
         * @param {String} xChainId Klaytn network chain ID; one of [1001, 8217]
         * @param {String} contractAddressOrAlias Contract address (hexadecimal, starting with 0x) or alias
         * @param {String} tokenId Token ID
         * @param {Object} opts Optional parameters
         * @param {TransferKip17TokenRequest} opts.body
         * @param {KIP17Api~transferTokenCallback} callback The callback function, accepting three arguments: error, data, response
         * data is of type: {@link Kip17TransactionStatusResponse}
         */
        this.transferToken = function(xChainId, contractAddressOrAlias, tokenId, opts, callback) {
            opts = opts || {}
            const postBody = opts.body

            // verify the required parameter 'xChainId' is set
            if (xChainId === undefined || xChainId === null) {
                throw new Error("Missing the required parameter 'xChainId' when calling transferToken")
            }

            // verify the required parameter 'contractAddressOrAlias' is set
            if (contractAddressOrAlias === undefined || contractAddressOrAlias === null) {
                throw new Error("Missing the required parameter 'contractAddressOrAlias' when calling transferToken")
            }

            // verify the required parameter 'tokenId' is set
            if (tokenId === undefined || tokenId === null) {
                throw new Error("Missing the required parameter 'tokenId' when calling transferToken")
            }

            const pathParams = {
                'contract-address-or-alias': contractAddressOrAlias,
                'token-id': tokenId,
            }
            const queryParams = {}
            const collectionQueryParams = {}
            const headerParams = {
                'x-chain-id': xChainId,
            }
            const formParams = {}

            const authNames = ['auth']
            const contentTypes = ['application/json']
            const accepts = ['application/json']
            const returnType = Kip17TransactionStatusResponse

            return this.apiClient.callApi(
                '/v1/contract/{contract-address-or-alias}/token/{token-id}',
                'POST',
                pathParams,
                queryParams,
                collectionQueryParams,
                headerParams,
                formParams,
                postBody,
                authNames,
                contentTypes,
                accepts,
                returnType,
                callback
            )
        }
    }

    return KIP17Api
})
